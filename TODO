= Way History =
Think of a (probably sophisticated) algorithm to compute the versions
of a way. This has to take into account that a way is changed when its
nodes are changed (this event does not trigger a new way version!).
Nodes might also be removed from the way without further notice.
The result of this computation should be a chronological list of 
(wayInstance, [nodeInstances]) pairs with wayInstance (wayid, wayversion)
possibly remaining the same (ignore tag edits!) while [nodeInstances]
must change. Nodechanges are only taken into consideration if their
location changed (no tag-changes) or they were deleted (unknown?).
----------------

= Filters =
There is only a basic filter available and functionality like
filtercomposition is not implemented yet. It is also not so clear
what the differences between Filters and specific Enumerators is
(except that filters can (should) be more sophisticated.)
-----------

= Overpass JSON Parsing =
OverpassRequest.parse_json() is implemented in a complicated way and
based on assumptions. It probably also leaves room for improvement
from a performance point of view.
-------------------------

= Overpass Request Format = 
OverpassRequest.do() does not support a format other than JSON.
Remove params[:format] completely?
---------------------------

= Backlinks =
Backlink from Node to WayInstance, i.e. answering the question
"Which Way(instance)s is this node part of?". 
See way.rb WayInstance.initialize!
Same for Relation->Node/Way/Relation.
--------------

= Persist Users =
Node./Way./Relation.all_users maybe introduce @users of class Set
and manage users persistently.
-----------------
