= Enumerators =
Give access to data by means of enumerators rather than arrays / hashes.

nodehistoryenumerator
way...
relation...
---------------

= Filters =
Build in filters.
-----------

= UserLoader.load_tracks untested =
Test UserLoader.load_tracks.
-----------------------------------

= User.name =
User.name is attr_reader atm, but is not set by default.
Either set it to a value when creating new users (sometimes not possible)
or make it a delayed_attr_reader attribute.
-------------


- HistoryLoader in Datastore
  -> check/change OSMObject.history and load_history

- Filter for Enumerators

- Create Gem structure

- Test tracks with OSM account

- Give user delayed_attr :tracks with default save directory (in datastore?)

- Check datastore DEFAULT_CONFIG integration

- history_by_location -> sort when loading the history
  -> NideHistoryDifferenceEnumerator

- ExtendedWayHistoryEnumerator algorithm for finding the "versions" of a way

- User.name added in datastore by default

- HistoryLoader.load complete and test
  -> OSMObject.load_history and sort

- History load warning if incomplete history

- Broken node-history check method




= Overpass JSON Parsing =
OverpassRequest.parse_json() is implemented in a complicated way and
based on assumptions. It probably also leaves room for improvement
from a performance point of view.
-------------------------

= Overpass Request Format = 
OverpassRequest.do() does not support a format other than JSON.
Remove params[:format] completely?
---------------------------

= Backlinks =
Backlink from Node to WayInstance, i.e. answering the question
"Which Way(instance)s is this node part of?". 
See way.rb WayInstance.initialize!
Same for Relation->Node/Way/Relation.
--------------

= Persist Users =
Node./Way./Relation.all_users maybe introduce @users of class Set
and manage users persistently.
-----------------
